import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import EmployeesComponent from './EmployeesComponent'

const mockEmployees = [
  {
    id: 1,
    firstName: 'John',
    lastName: 'Doe',
    position: 'Developer',
    employmentType: 'Full-time',
    hireDate: '2024-01-01T00:00:00.000Z',
    contactInfo: 'john@example.com',
    employeeSkills: [],
    projectAssignments: [],
    salaries: []
  },
  {
    id: 2,
    firstName: 'Jane',
    lastName: 'Smith',
    position: 'Designer',
    employmentType: 'Contract',
    hireDate: '2024-02-01T00:00:00.000Z',
    contactInfo: 'jane@example.com',
    employeeSkills: [],
    projectAssignments: [],
    salaries: []
  }
]

beforeEach(() => {
  global.fetch = jest.fn().mockResolvedValue({
    ok: true,
    json: async () => mockEmployees,
  })
})

describe('EmployeesComponent', () => {
  test('renders employees page title', async () => {
    render(<EmployeesComponent />)
    
    expect(screen.getByText('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏')).toBeInTheDocument()
  })

  test('displays employee form', () => {
    render(<EmployeesComponent />)
    
    expect(screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –∏–º—è')).toBeInTheDocument()
    expect(screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')).toBeInTheDocument()
    expect(screen.getByPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å')).toBeInTheDocument()
    expect(screen.getByPlaceholderText('email@example.com')).toBeInTheDocument()
  })

  test('loads and displays employees', async () => {
    render(<EmployeesComponent />)
    
    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument()
      expect(screen.getByText('Jane Smith')).toBeInTheDocument()
      expect(screen.getByText('Developer')).toBeInTheDocument()
      expect(screen.getByText('Designer')).toBeInTheDocument()
    })
  })

  test('displays correct statistics', async () => {
    render(<EmployeesComponent />)
    
    await waitFor(() => {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      expect(screen.getByText('2')).toBeInTheDocument()
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
      const fullTimeElements = screen.getAllByText('1')
      expect(fullTimeElements.length).toBeGreaterThan(0)
    })
  })

  test('search functionality works', async () => {
    render(<EmployeesComponent />)
    
    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument()
    })

    const searchInput = screen.getByPlaceholderText('üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...')
    fireEvent.change(searchInput, { target: { value: 'John' } })

    // –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ John
    expect(screen.getByText('John Doe')).toBeInTheDocument()
  })

  test('edit button populates form with employee data', async () => {
    render(<EmployeesComponent />)
    
    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument()
    })

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è John Doe
    const editButtons = screen.getAllByTitle('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
    fireEvent.click(editButtons[0])

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–∏–ª–∞—Å—å –¥–∞–Ω–Ω—ã–º–∏
    expect(screen.getByDisplayValue('John')).toBeInTheDocument()
    expect(screen.getByDisplayValue('Doe')).toBeInTheDocument()
    expect(screen.getByDisplayValue('Developer')).toBeInTheDocument()
  })

  test('form validation works', async () => {
    render(<EmployeesComponent />)
    
    const submitButton = screen.getByText(/–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞/)
    fireEvent.click(submitButton)

    // –§–æ—Ä–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1) // –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    })
  })

  test('handles API errors gracefully', async () => {
    global.fetch = jest.fn().mockRejectedValue(new Error('API Error'))
    
    render(<EmployeesComponent />)
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
    expect(screen.getByText('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏')).toBeInTheDocument()
  })
})