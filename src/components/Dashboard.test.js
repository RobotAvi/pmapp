import { render, screen, waitFor } from '@testing-library/react'
import Dashboard from './Dashboard'

// Mock fetch responses
const mockProjectsResponse = [
  { id: 1, name: 'Test Project', status: { status: 'Active' }, startDate: '2024-01-01', description: 'Test description' }
]

const mockEmployeesResponse = [
  { id: 1, firstName: 'John', lastName: 'Doe', employmentType: 'Full-time', hireDate: '2024-01-01', position: 'Developer', projectAssignments: [] }
]

const mockAccountsResponse = [
  { id: 1, name: 'Test Account', createdAt: '2024-01-01' }
]

beforeEach(() => {
  global.fetch = jest.fn()
    .mockResolvedValueOnce({
      json: async () => mockProjectsResponse,
    })
    .mockResolvedValueOnce({
      json: async () => mockEmployeesResponse,
    })
    .mockResolvedValueOnce({
      json: async () => mockAccountsResponse,
    })
})

describe('Dashboard Component', () => {
  test('renders dashboard title', async () => {
    render(<Dashboard />)
    
    await waitFor(() => {
      expect(screen.getByText('üìä –î–∞—à–±–æ—Ä–¥')).toBeInTheDocument()
    })
  })

  test('displays correct statistics after loading', async () => {
    render(<Dashboard />)
    
    await waitFor(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤
      expect(screen.getByText('1')).toBeInTheDocument() // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      expect(screen.getByText('1')).toBeInTheDocument() // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      expect(screen.getByText('1')).toBeInTheDocument() // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    })
  })

  test('shows loading state initially', () => {
    render(<Dashboard />)
    
    expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞...')).toBeInTheDocument()
    expect(screen.getByRole('status')).toBeInTheDocument()
  })

  test('makes correct API calls', async () => {
    render(<Dashboard />)
    
    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledTimes(3)
      expect(global.fetch).toHaveBeenCalledWith('/api/projectsApi')
      expect(global.fetch).toHaveBeenCalledWith('/api/employeesApi')
      expect(global.fetch).toHaveBeenCalledWith('/api/accountsApi')
    })
  })

  test('displays recent projects section', async () => {
    render(<Dashboard />)
    
    await waitFor(() => {
      expect(screen.getByText('üìã –ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã')).toBeInTheDocument()
      expect(screen.getByText('Test Project')).toBeInTheDocument()
    })
  })

  test('displays recent employees section', async () => {
    render(<Dashboard />)
    
    await waitFor(() => {
      expect(screen.getByText('üë• –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')).toBeInTheDocument()
      expect(screen.getByText('John Doe')).toBeInTheDocument()
    })
  })
})